Use Cases Demonstrating Design Patterns

Here are six creative use cases, each implemented with specific code modifications or additions to demonstrate your understanding of the design patterns.
Behavioral Design Patterns

1. Observer Pattern Use Case: Spacecraft System Alerts

Scenario: In addition to the console, critical task conflicts should trigger an alert to a "Spacecraft Main Computer" (simulated by another observer) which might take automated actions (e.g., re-prioritize other systems, notify mission control).

Implementation:

    Create a new observer class SpacecraftMainComputer that implements TaskConflictObserver.

    This observer will log a special message or simulate an automated response when a conflict occurs.

    Register this new observer with the ScheduleManager.

class SpacecraftMainComputer implements TaskConflictObserver {
    private static final Logger logger = AppLogger.getLogger();
    public void onTaskConflict(Task newTask, Task conflictingTask) {
        logger.severe(String.format("CRITICAL SPACECRAFT ALERT: Task conflict detected! " +
                        "New task '%s' conflicts with '%s'. Initiating automated re-evaluation of mission priorities.",
                newTask.getDescription(), conflictingTask.getDescription()));
        
    }
}

        
        ScheduleManager scheduleManager = ScheduleManager.getInstance();
        ConsoleNotifier notifier = new ConsoleNotifier();
        SpacecraftMainComputer spacecraftComputer = new SpacecraftMainComputer(); 

        scheduleManager.addConflictObserver(notifier);
        scheduleManager.addConflictObserver(spacecraftComputer); 
        scheduleManager.addUpdateObserver(notifier);
  
